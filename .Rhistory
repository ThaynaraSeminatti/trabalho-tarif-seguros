mod.log.normal = fitdist(log(danishuni$Loss+0.01),"lognormal")
mod.gamma = fitdist(log(danishuni$Loss+0.01),"gamma")
plot(mod.gamma)
mod.log.normal = fitdist(log(danishuni$Loss+0.01),"lognormal")
fitdist(log(danishuni$Loss+0.01),"lognormal")
mod.gamma = fitdist(log(danishuni$Loss+0.01),"lognormal")
mod.gamma = fitdist(log(danishuni$Loss+0.01), densfun = "lognormal")
mod.gamma = fitdistr(log(danishuni$Loss + 0.0001), densfun = "lognormal")
mod.gamma = fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma")
plot(mod.gamma)
mod.gamma = fitdistr(log(danishuni$Loss + 0.0001), densfun = "lognormal")
mod.gamma = fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma")
plot(mod.gamma)
mod.gamma = fitdistr(log(danishuni$Loss + 0.0001), densfun = "lognormal")
plot(mod.log.normal)
mod.gamma = fitdist(log(danishuni$Loss+0.01),"gamma")
plot(mod.gamma)
mod.gamma = fitdist(log(danishuni$Loss+0.01),"gamma")
plot(mod.gamma)
mod.log.normal = fitdistr(log(danishuni$Loss + 0.0001), densfun = "lognormal")
plot(mod.log.normal)
mod.log.normal = fitdistr(danishuni$Loss, densfun = "lognormal")
plot(mod.log.normal)
mod.log.normal = fitdistr(danishuni$Loss, densfun = "lognormal")
mod.log.normal
mod.gamma = fitdist(log(danishuni$Loss+0.01), "lognormal")
plot(mod.gamma)
fit_ln <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "lognormal")
plot(fit_ln)
mod.gamma
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_histogram(aes(y = ..density..), alpha = 0.5, fill = "steelblue")+
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva 1")) +
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva 2"))+
scale_color_manual(values = c("black", "blue", "red"),
name = "Curvas de densidade",
labels = c("Densidade empírica", "Distribuição Gama", "Distribuição Lognormal")) +
labs(x = "Indenizações", y = "Densidade",
title = "Histograma e densidade empírica das indenizações por incêndio na Dinamarca")
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva 1"))
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva 2"))
## ajustando distribuiÃ§Ã£o normalmod.gamma = fitdist(log(danishuni$Loss+0.01), "lognormal")
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma"))
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))
## ajustando distribuiÃ§Ã£o normalmod.gamma = fitdist(log(danishuni$Loss+0.01), "lognormal")
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma"))
## ajustando distribuiÃ§Ã£o normalmod.gamma = fitdist(log(danishuni$Loss+0.01), "lognormal")
danishuni %>%
ggplot( aes(x = Loss)) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma"))
## ajustando distribuiÃ§Ã£o normalmod.gamma = fitdist(log(danishuni$Loss+0.01), "lognormal")
danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma"))
if(!require(gridExtra)){install.packages("gridExtra");library(gridExtra)}
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')
grid.arrange(g1,g2, ncol = 2)
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")
grid.arrange(g1,g2, ncol = 2)
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,10)
grid.arrange(g1,g2, ncol = 2)
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1)
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1)
grid.arrange(g1,g2, ncol = 2)
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1.2)
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1.2)
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,2)
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,2)
grid.arrange(g1,g2, ncol = 2)
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1.75)
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1.75)
grid.arrange(g1,g2, ncol = 2)
ggplot( aes(sample = log(Loss))) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados") +
theme_minimal()
danishuni %>%
ggplot( aes(sample = log(Loss))) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados") +
theme_minimal()
ggplot(qq_func(danishuni$Loss, rgamma(length(danishuni$Loss), alpha_gama, beta_gama)), aes(x = qteorico, y = qobservado))
qq_func <- function(dados, dist) {
qteorico <- quantile(dist, seq(0.01, 0.99, by = 0.01))
qobservado <- quantile(dados, seq(0.01, 0.99, by = 0.01))
data.frame(qteorico = qteorico, qobservado = qobservado)
}
ggplot(qq_func(danishuni$Loss, rgamma(length(danishuni$Loss), alpha_gama, beta_gama)), aes(x = qteorico, y = qobservado)) +
geom_point()
rgamma(length(danishuni$Loss+0.001), alpha_gama, beta_gama))
qq_func(danishuni$Loss, rgamma(length(danishuni$Loss+0.001), alpha_gama, beta_gama))
ggplot( aes(sample = y_ga))) +
ggplot( aes(sample = y_ga)) +
stat_qq()
modelo = data.frame(x_ga = x_ga, y_ga = y_ga, x_ln = x_n, y_ln = y_ln)
modelo = data.frame(x_ga = x_ga, y_ga = y_ga, x_ln = x_n, y_ln = y_ln)
modelo = data.frame(x_ga = x_ga, y_ga = y_ga, x_ln = x_ln, y_ln = y_ln)
modelo %>%
ggplot( aes(sample = y_ga)) +
stat_qq()
modelo %>%
ggplot( aes(sample = y_ga)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
g_3  = modelo %>%
ggplot( aes(sample = y_ga)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
g_4  = modelo %>%
ggplot( aes(sample = y_ln)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
grid.arrange(g1,g2, ncol = 2)
grid.arrange(g3,g4, ncol = 2)
g_3  = modelo %>%
ggplot( aes(sample = y_ga)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
g_4  = modelo %>%
ggplot( aes(sample = y_ln)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
g_3  = modelo %>%
ggplot( aes(sample = y_ga)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
g_4  = modelo %>%
ggplot( aes(sample = y_ln)) +
stat_qq() +
labs(title = "Gráfico de qqplot",
x = "Quantis teóricos",
y = "Quantis observados")
grid.arrange(g3,g4, ncol = 2)
grid.arrange(g_3,g_4, ncol = 2)
mod.gamma = fitdist(log(danishuni$Loss+0.01),"gamma",method = 'mle')
# [1] 60.1985
fit_ga
fit_ga$estimate
fit_ga$estimate[1]
qgamma(0.95, shape = fit_ga$estimate[1], rate = 1/12.2183)
qgamma(0.95, shape = fit_ga$estimate[1], rate = fit_ga$estimate[2])
fit_ln$estimate
qlnorm(0.95, meanlog = fit_ln$estimate[1], sdlog = fit_ln$estimate[2])
quantile(danishuni$Loss[danishuni$Loss > 0], 0.95)
data(credit)
summary(credit$checking_status)
View(credit)
credit$checking_status <- recode(credit$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
data(credit)
credit.f = credit
credit.f$checking_status <- recode(credit.f$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
summary(credit$checking_status)
data(credit)
require(car)
data(credit)
data(credit)
credit.f = credit
credit.f$checking_status <- recode(credit.f$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
require(CASdatasets)
require(car)
install.packages("car")
require(car)
## discretizando as covariÃ¡veis contÃ­nuas
credit.f = credit
credit.f$age = cut(credit.f$age,c(0,25,Inf))
credit.f$credit_amount = cut(credit.f$credit_amount,c(0,4000,Inf))
credit.f$duration = cut(credit.f$duration,c(0,15,36,Inf))
credit.rcd <- credit.f
credit.rcd$checking_status <- recode(credit.rcd$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
credit.rcd$credit_history <- recode(credit.rcd$credit_history, "c('A30','A31')='critical account'; c('A32','A33')='existing credits paid back duly till now'; 'A34'='all credits paid back duly'")
credit.rcd$purpose <- recode(credit.rcd$purpose, "'A40'='Car (new)'; 'A41'='Car (used)'; c('A42','A43','A44','A45')='Domestic equipment'; c('A46','A48','A49')='Studies-Business'; 'A47'='Holidays'; else='Else'")
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma",method = 'mle')
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma")
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma",method = 'mle')
fit_ga <- fitdistrplus::fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma",method = 'mle')
if(!require(fitdistrplus)){install.packages("fitdistrplus");library(fitdistrplus)}
fit_ga <- fitdistrplus::fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma",method = 'mle')
fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma",method = 'mle')
fit_ga <- fitdistrplus::fitdistr(log(danishuni$Loss + 0.0001), "gamma",method = 'mle')
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), "gamma",method = 'mle')
log(danishuni$Loss + 0.0001)
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), "gamma",method = 'mme')
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), "gamma", method="mme")
danishuni$Loss
og(danishuni$Loss + 0.0001)
log(danishuni$Loss + 0.0001)
fitdistr(log(danishuni$Loss + 0.0001), "gamma")
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), "gamma", method="mme")
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma",method = 'mle')
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), "gamma",method = 'mle')
fit_ga <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "gamma")
fit_ln <- fitdistr(log(danishuni$Loss + 0.0001), densfun = "lognormal")
data(credit)
data(credit)
## discretizando as covariÃ¡veis contÃ­nuas
credit.f = credit
## discretizando as covariÃ¡veis contÃ­nuas
credit.f = credit
credit.f$age = cut(credit.f$age,c(0,25,Inf))
credit.f$duration = cut(credit.f$duration,c(0,15,36,Inf))
credit.rcd <- credit.f
credit.rcd$personal_status <- recode(credit.rcd$personal_status, "'A91'='male divorced/separated'; 'A92'='female divorced/separated/married'; c('A93','A94')='male single/married/widowed'; 'A95'='female : single'")
credit.rcd$other_parties <- recode(credit.rcd$other_parties, "'A103'='guarantor'; else='none'")
credit.rcd$property_magnitude <- recode(credit.rcd$property_magnitude, "'A121'='Real estate'; 'A124'='No property'; else='Else'")
credit.rcd$other_payment_plans <- recode(credit.rcd$other_payment_plans, "'A143'='None'; else='Banks-Stores'")
credit.rcd$housing <- recode(credit.rcd$housing, "'A152'='Owner';else='Else'")
summary(credit.f)
summary(credit.rcd)
View(credit.rcd)
credit.rcd$checking_status <- recode(credit.rcd$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
credit.rcd$checking_status <- car::recode(credit.rcd$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
credit.rcd$checking_status <- car::recode(credit.rcd$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
credit.rcd$checking_status <- car::recode(credit.rcd$checking_status, "'A14'='No checking account'; 'A11'='CA < 0 euros'; 'A12'='CA in [0-200 euros['; 'A13'='CA > 200 euros' ")
credit.rcd$purpose <- car::recode(credit.rcd$purpose, "'A40'='Car (new)'; 'A41'='Car (used)'; c('A42','A43','A44','A45')='Domestic equipment'; c('A46','A48','A49')='Studies-Business'; 'A47'='Holidays'; else='Else'")
credit.rcd$savings <- car::recode(credit.rcd$savings, "c('A65','A63','A64')='No savings or > 500 euros'; c('A62','A61')='< 500 euros'")
credit.rcd$employment <- car::recode(credit.rcd$employment, "c('A71','A72')='unemployed or < 1 year'; 'A73'= 'E [1-4[ years'; c('A74','A75')='> 4 years'")
credit.rcd$personal_status <- car::recode(credit.rcd$personal_status, "'A91'='male divorced/separated'; 'A92'='female divorced/separated/married'; c('A93','A94')='male single/married/widowed'; 'A95'='female : single'")
credit.rcd$other_parties <- car::recode(credit.rcd$other_parties, "'A103'='guarantor'; else='none'")
credit.rcd$property_magnitude <- car::recode(credit.rcd$property_magnitude, "'A121'='Real estate'; 'A124'='No property'; else='Else'")
credit.rcd$other_payment_plans <- car::recode(credit.rcd$other_payment_plans, "'A143'='None'; else='Banks-Stores'")
credit.rcd$housing <- car::recode(credit.rcd$housing, "'A152'='Owner';else='Else'")
summary(credit.rcd)
summary(credit.rcd$checking_status)
summary(credit.rcd$checking_status, credit.rcd$class)
summary(credit.rcd$checking_status)
summary(c(credit.rcd$checking_status, credit.rcd$class))
summary(credit.rcd$checking_status)
summary( credit.rcd$class)
table( credit.rcd$checking_status,credit.rcd$class)
prop.table(table( credit.rcd$checking_status,credit.rcd$class))
boxplot(credit.rcd$checking_status ~credit.rcd$class)
boxplot(~credit.rcd$checking_status)
boxplot(~credit.rcd$checking_status~credit.rcd$class)
boxplot(credit.rcd$checking_status~credit.rcd$class)
boxplot(credit.rcd$class~credit.rcd$checking_status)
boxplot(credit.rcd$class,credit.rcd$checking_status)
boxplot(credit.rcd$class~credit.rcd$checking_status)
credit.rcd[credit.rcd$class == 1,]
credit.mau = credit.rcd[credit.rcd$class == 1,]
hist(credit.mau$duration)
View(credit.mau)
View(credit)
unique(credit.mau$duration)
unique(credit$duration)
hist(credit$duration)
credit.mau = credit[credit$class == 1,]
hist(credit.mau$duration)
hist(credit.mau$duration, breaks = 30)
hist(credit.mau$duration, breaks = 10)
hist(credit.mau$duration, breaks = 9)
hist(credit.mau$duration, breaks = 6)
credit.mau$duration2 = cut(credit.mau$duration,c(0,12,18,24,36,Inf))
unique(credit.mau$duration2)
credit.mau$duration2 = cut(credit.mau$duration,c(0,6,12,18,24,36,Inf))
unique(credit.mau$duration2)
table(credit.mau$duration2)
prop.table(credit.mau$duration2)
prop.table(table(credit.mau$duration2))
prop.table(table(credit.mau$duration2))*100
g1  =  danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ga, y =  y_ga, colour = "Curva de densidade ajustada gamma")) +
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1.75)
g2 = danishuni %>%
ggplot( aes(x = log(Loss))) +
geom_density(aes(color = "Densidade empírica"), size = 0.5, linetype = "solid")+
geom_line(aes(x = x_ln, y =  y_ln, colour = "Curva de densidade ajustada lognormal"))+
labs(x = 'Densidade', y = 'log das Indenizações')+
theme(legend.position = "top")+ylim(0,1.75)
grid.arrange(g1,g2, ncol = 2)
grid.arrange(g1,g2, ncol = 2)
grid.arrange(g1,g2, ncol = 2)
grid.arrange(g_3,g_4, ncol = 2)
qgamma(0.95, shape = fit_ga$estimate[1], rate = fit_ga$estimate[2])
qlnorm(0.95, meanlog = fit_ln$estimate[1], sdlog = fit_ln$estimate[2])
quantile(danishuni$Loss[danishuni$Loss > 0], 0.95)
quantile(danishuni$Loss[log(danishuni$Loss+0.01) > 0], 0.95)
log(danishuni$Loss+0.01) > 0
danishuni$Loss[log(danishuni$Loss+0.01) > 0]
quantile(danishuni$Loss, 0.95)
quantile(log(danishuni$Loss+0.01), 0.95)
qgamma(0.95, shape = fit_ga$estimate[1], rate = fit_ga$estimate[2])
qlnorm(0.95, meanlog = fit_ln$estimate[1], sdlog = fit_ln$estimate[2])
quantile(log(danishuni$Loss+0.01), 0.95)
## estatistica descritiva
summary(credit.rcd$checking_status)
summary( credit.rcd$class)
prop.table(table( credit.rcd$checking_status,credit.rcd$class))
####pacotes usados####
library(dplyr)
serie_br = read.csv('serie_temporal_estados_br.csv')
serie_br = serie_br[,c('year', 'mx','location_name', 'sex', 'age_group_name')]
rio_de_janeiro_init = serie_br[serie_br$location_name == "Rio de Janeiro" &
serie_br$sex == "both" , ]
rio_de_janeiro <- na.omit(rio_de_janeiro_init)
## Instalando e carregando o pacote
##install.packages("lifecontingencies")
require(lifecontingencies)
install.packages("lifecontingencies")
## Criando uma tabela de vida - Ex: SOA life table
data("soaLt")
n
#### calculando um modelo que você guarda um premio (P) por t anos k vezes por ano e recebe (B)
i = 0.06
B = 10000
t=5
annuity(i,n = t,m=0, k=1,"due")*B
## Taxa de Juros e Taxa de Desconto
require(lifecontingencies)
annuity(i,n = t,m=0, k=1,"due")*B
setwd("~/UFMG/2023.1/TARIFACAO SEGUROS/trabalho final")
dados = read.csv('dados_palio_1_0.csv')
View(dados)
dados$Freq.Total = dados$Freq..Incêncio.e.Roubo+ dados$Freq..Colisão  + dados$Faixa.Etária + dados$Freq..Outras
dados$Freq.Total = dados$Freq..Incêncio.e.Roubo+
dados$Freq..Colisão  +
dados$Freq..Outras
dados$Indenizacao = dados$Indeniz..Incêncio.e.Roubo..R..+
dados$Indeniz..Colisão..R.. + dados$Indeniz..Outras..R..
##### agr. por estado
dados$Região = substr(dados$Região, start=1, stop=2)
dados = read.csv('dados_palio_1_0.csv')
dados$Freq.Total = dados$Freq..Incêncio.e.Roubo+
dados$Freq..Colisão  +
dados$Freq..Outras
dados$Indenizacao = dados$Indeniz..Incêncio.e.Roubo..R..+
dados$Indeniz..Colisão..R.. + dados$Indeniz..Outras..R..
##### agr. por estado
dados$Região_ = substr(dados$Região, start=1, stop=2)
#### pacotes
library('tidyverse')
dados %>%
ggplot(aes(x = Faixa.Etária, y  = Expostos))+
geom_bar()
dados %>%
ggplot(aes(x = Faixa.Etária, y  = Expostos))+
geom_col()
dados %>%
ggplot(aes(x = factor(Faixa.Etária), y  = Expostos))+
geom_col()
dados %>%
ggplot(aes(x = Sexo.Condutor, y = Expostos))+
geom_col()
###regiao
dados %>%
ggplot(aes(x = Região_, y = Expostos))+
geom_col()
summarise(dados)
summary(dados)
dados_mod = dados %>%  select(Expostos, Faixa.Etária,Região_, Sexo.Condutor, Freq.Total,dados$Indenizacao)
dados_mod = dados %>%  select(Expostos, Faixa.Etária,Região_, Sexo.Condutor, Freq.Total,Indenizacao,Prêmio.Médio..R..)
summary(dados_mod)
dados_mod[Freq.Total >= 4000,]
dados_mod[dados$Freq.Total >= 4000,]
### analises descrites
## faixa etaria
dados_mod %>%
ggplot(aes(x = factor(Faixa.Etária), y  = Expostos))+
geom_col()
### analises descrites
## faixa etaria
dados_mod %>%
ggplot(aes(x = factor(Faixa.Etária), y  = Expostos))+
geom_col()
### sexo
dados_mod %>%
ggplot(aes(x = Sexo.Condutor, y = Expostos))+
geom_col()
###regiao
dados_mod %>%
ggplot(aes(x = Região_, y = Expostos))+
geom_col()
### sexo
dados_mod %>%
ggplot(aes(x = Sexo.Condutor, y = Expostos,color = Faixa.Etária))+
geom_col()
### sexo
dados_mod %>%
ggplot(aes(x = Sexo.Condutor, y = Expostos,fill = Faixa.Etária))+
geom_col()
### analises descrites
## faixa etaria
dados_mod %>%
ggplot(aes(x = factor(Faixa.Etária), y  = Expostos, fill = Sexo.Condutor))+
geom_col()
###regiao
dados_mod %>%
ggplot(aes(x = Região_, y = Expostos, fill = Sexo.Condutor))+
geom_col()
#### indenizao
## faixa etaria
dados_mod %>%
ggplot(aes(x = factor(Faixa.Etária), y  = Indenizacao))+
geom_col()
### sexo
dados_mod %>%
ggplot(aes(x = Sexo.Condutor, y = Expostos,fill = Indenizacao))+
geom_col()
### sexo
dados_mod %>%
ggplot(aes(x = Sexo.Condutor, y = Indenizacao,fill = Faixa.Etária))+
geom_col()
### sexo
dados_mod %>%
ggplot(aes(x = Sexo.Condutor, y = Indenizacao))+
geom_col()
dados_mod[dados$Freq.Total >= 4000,]
dados_mod %>%
ggplot(aes(x = Região_, y = Freq.Total)) +
geom_boxplot()
